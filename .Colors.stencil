// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if catalogs %}
{% set enumName %}{{param.enumName|default:"Color"}}{% endset %}
{% set colorType %}{{param.colorTypeName|default:"ColorAsset"}}{% endset %}
{% set forceNamespaces %}true{% endset %}
{% set accessModifier %}public{% endset %}
import Foundation
import SwiftUI

{% macro enumBlock assets %}
{% call casesBlock assets %}
{% if param.allValues %}

// swiftlint:disable trailing_comma

{% if resourceCount.color > 0 %}
{{accessModifier}} static let allColors: [{{colorType}}] = [
{% filter indent:2 %}{% call allValuesBlock assets "color" "" %}{% endfilter %}
]
{% endif %}
// swiftlint:enable trailing_comma


{% endif %}
{% endmacro %}
{% macro casesBlock assets %}
{% for asset in assets %}
{% if asset.type == "color" %}
static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = Color("{{asset.value}}", bundle: .module)
{% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
{% filter indent:0 %}{% call casesBlock asset.items %}{% endfilter %}
{% elif asset.items %}
{% call casesBlock asset.items %}
{% endif %}
{% endfor %}
{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
{% for asset in assets %}
{% if asset.type == filter %}
{{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
{% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
{% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
{% call allValuesBlock asset.items filter prefix2 %}
{% elif asset.items %}
{% call allValuesBlock asset.items filter prefix %}
{% endif %}
{% endfor %}
{% endmacro %}
{{accessModifier}} extension {{enumName}} {
{% for catalog in catalogs %}
{% filter indent:2 %}{% call enumBlock catalog.assets %}{% endfilter %}
{% endfor %}
}
{% else %}
// No assets found
{% endif %}
